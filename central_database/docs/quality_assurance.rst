Development quality and good-practices
======================================================================

How do we ensure code quality and adherence to software development best practices?
----------------------------------------------------------------------

We are aware of the significant difficulty in maintaining the excellent quality of an open source product.
As a project grows and new contributors join, maintaining a style and good coding practices can easily be neglected.
We believe that quality assurance should be automated as much as possible to alleviate this burden on contributors.
Below we detail the strategy used in this project.
Additional details on how to use each tool can be found in the contributing guide.

Codestyle
^^^^^^^^^^^^^^^^^^^^^^

Coding style is evaluated using `pre-commit <https://pre-commit.com/>`_ hooks.
Hooks are helpful for finding basic errors. Every commit automatically triggers the hooks, which flag problems with
the code like debug statements, trailing whitespace, and missing semicolons, coding style (PEP8),
and cyclomatic complexity.

Automated tests
^^^^^^^^^^^^^^^^^^^^^^

We use `pytest <https://docs.pytest.org/>`_ as the framework for building and executing automated tests.
The minimum code coverage of 80% is implemented by an automated Bitbucket Pipelines evaluation,
which checks the code with every pull-request.

Dependency management
^^^^^^^^^^^^^^^^^^^^^^

This project uses `Poetry <https://python-poetry.org/>`_ for dependency management. Poetry has the great advantage of
checking the compatibility of all project dependencies and maintaining a reproducible installation via a lockfile.

Documentation
^^^^^^^^^^^^^^^^^^^^^^

Python code documentation can be generated by `Sphinx <https://www.sphinx-doc.org/>`_ from docstrings in Numpy or
Google format. In addition, pages can be manually added in `rst` format to supplement other aspects of the
project documentation.
